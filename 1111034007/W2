#include <stdio.h>
#include <標準庫.h>
#include <stdio.h>
#define 大小 4
#定義STU 13
結構學生{
    	字符名稱[20]；
    	無符號整數 stud_id；
    	數學；
    	內部計算機；
    	浮動平均值；
		詮釋;   	
	};
	//結構學生stud[stu];
	typedef 結構學生螺柱；
void sort(stud mystu[STU]);
int 主要（無效）
{
    int 鍵，結果=0，i，j；   
   
	螺柱 my_stu[STU]={{"愛麗絲",2,98,72,0,0},
						{“丹尼”，3,76,32,0,0}，
						{“湯姆”，6,98,67,0,0}，
						{“尼娜”，7,89,32,0,0}，
						{“五月”,8,98,55,0,0},
						{“辛迪”，9,87,32,0,0}，
						{“史蒂文”，10,98,65,0,0}，
						{“艾倫”，11,99,32,0,0}，
						{“妮可”，12,98,71,0,0}，
						{“棕褐色”,13,76,91,0,0},
						{“珍妮”，18,93,49,0,0}，
						{“鮑勃”，19,67,82,0,0}，
						{"蒂姆",20,66,98,0,0},};

    //puts("在原始訂單中命名 ID 項目");
    對於（j=0；j<STU；j++）
    {	
    my_stu[j].avg=(float)(my_stu[j].math+my_stu[j].computer)/2;
	}
    
    對於（j=0；j<STU；j++）
    { printf("%10s", my_stu[j].name);
		printf("%4d", my_stu[j].stu_id);
		printf("%6d", my_stu[j].math);
		printf(" %6d", my_stu[j].computer);
		printf(" %6.2f", my_stu[j].avg);
    	printf("\n");
	}
		對於（j=0；j<STU；j++）
    {	
    	對於（i=13；i<STU；i--）
		{
		my_stu[j].s=i;	
		}
	}
	
	printf("\n\n\n");
	排序（my_stu）；
 	
	
	對於（j=0；j<STU；j++）
    { printf("%10s", my_stu[j].name);
		printf("%4d", my_stu[j].stu_id);
		printf("%6d", my_stu[j].math);
		printf("%6d", my_stu[j].computer);
		printf(" %6.2f", my_stu[j].avg);
	// printf("%4d", my_stu[j].s);
    	printf("\n");
	}
	
	printf("\n");
	printf("失敗:");
	對於（j=0；j<STU；j++）{
	如果 (my_stu[j].avg<60)
	{
		printf("% 8s", my_stu[j].name);
	}
	
	}
}
/* printf("\n");
    對於 (i = 0; i < SIZE; ++i) {
        printf("%4d", a[1][i]);
    }
*/
    //冒泡排序                                         
    // 循環控制遍數                    
/*
    排序（名稱，a，stu）；
    puts("\n數據項按升序排列");

    對於（j=0；j<stu；j++）
    { printf("%8s", 姓名[j]);
		對於 (i = 0; i < SIZE; ++i) {
        	printf("%4d", a[j][i]);
    	}
    	printf("\n");
	}

}
*/

無效排序（螺柱mystu [STU]）
{	
	梭哈 temp_stu；
	//字符 *ptr;
    int hold,pass,i;
    for (pass = 1; pass < STU; ++pass) {

        // 循環控制每次傳遞的比較次數   
        for (i = 0; i < STU - pass; ++i) {

            // 比較相鄰元素，如果先交換它們
            // 元素大於第二個元素           
            如果 (mystu[i].avg > mystu[i+1].avg) {
                交換(&mystu[i],&mystu[i+1]);
			
            }
        }
    }

}

void swap(stud *e1Ptr,stud *e2Ptr)
{螺柱保持;
保持=*e1Ptr；
*e1Ptr=*e2Ptr;
*e2Ptr=保持；
}
